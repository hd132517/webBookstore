{"ast":null,"code":"const API_URL = \"http://localhost:5000/books\";\n\n// 책 목록 가져오기 (검색 및 페이지네이션 지원)\nexport const fetchBooks = async (query = \"\", page = 1) => {\n  const searchQuery = query ? `title_like=${encodeURIComponent(query)}&author_like=${encodeURIComponent(query)}` : \"\";\n  const response = await fetch(`${API_URL}?${searchQuery}&_page=${page}&_limit=10`);\n  if (!response.ok) {\n    throw new Error(`Error fetching books: ${response.statusText}`);\n  }\n  return response.json();\n};\n\n// 특정 책 가져오기\nexport const fetchBookById = async id => {\n  const response = await fetch(`${API_URL}/${id}`);\n  if (!response.ok) {\n    throw new Error(`Error fetching book with ID ${id}: ${response.statusText}`);\n  }\n  return response.json();\n};\n\n// 책 추가\nexport const addBook = async book => {\n  const response = await fetch(API_URL, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(book)\n  });\n  if (!response.ok) {\n    throw new Error(`Error adding book: ${response.statusText}`);\n  }\n};\n\n// 책 삭제\nexport const deleteBook = async id => {\n  const response = await fetch(`${API_URL}/${id}`, {\n    method: \"DELETE\"\n  });\n  if (!response.ok) {\n    throw new Error(`Error deleting book with ID ${id}: ${response.statusText}`);\n  }\n};\n\n// 책 재고 업데이트 (수량 변경)\nexport const updateBookQuantity = async (id, stock) => {\n  const response = await fetch(`${API_URL}/${id}`, {\n    method: \"PATCH\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      stock\n    })\n  });\n  if (!response.ok) {\n    throw new Error(`Error updating stock for book ID ${id}: ${response.statusText}`);\n  }\n};","map":{"version":3,"names":["API_URL","fetchBooks","query","page","searchQuery","encodeURIComponent","response","fetch","ok","Error","statusText","json","fetchBookById","id","addBook","book","method","headers","body","JSON","stringify","deleteBook","updateBookQuantity","stock"],"sources":["C:/Users/skaeh/IdeaProjects/webBookstore/frontend/src/api.ts"],"sourcesContent":["import { Book } from \"./types\";\r\n\r\nconst API_URL = \"http://localhost:5000/books\";\r\n\r\n// 책 목록 가져오기 (검색 및 페이지네이션 지원)\r\nexport const fetchBooks = async (query: string = \"\", page: number = 1): Promise<Book[]> => {\r\n  const searchQuery = query\r\n    ? `title_like=${encodeURIComponent(query)}&author_like=${encodeURIComponent(query)}`\r\n    : \"\";\r\n  const response = await fetch(`${API_URL}?${searchQuery}&_page=${page}&_limit=10`);\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`Error fetching books: ${response.statusText}`);\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\n// 특정 책 가져오기\r\nexport const fetchBookById = async (id: number): Promise<Book> => {\r\n  const response = await fetch(`${API_URL}/${id}`);\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`Error fetching book with ID ${id}: ${response.statusText}`);\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\n// 책 추가\r\nexport const addBook = async (book: Omit<Book, \"id\">): Promise<void> => {\r\n  const response = await fetch(API_URL, {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify(book),\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`Error adding book: ${response.statusText}`);\r\n  }\r\n};\r\n\r\n// 책 삭제\r\nexport const deleteBook = async (id: number): Promise<void> => {\r\n  const response = await fetch(`${API_URL}/${id}`, { method: \"DELETE\" });\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`Error deleting book with ID ${id}: ${response.statusText}`);\r\n  }\r\n};\r\n\r\n// 책 재고 업데이트 (수량 변경)\r\nexport const updateBookQuantity = async (id: number, stock: number): Promise<void> => {\r\n  const response = await fetch(`${API_URL}/${id}`, {\r\n    method: \"PATCH\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({ stock }),\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`Error updating stock for book ID ${id}: ${response.statusText}`);\r\n  }\r\n};\r\n"],"mappings":"AAEA,MAAMA,OAAO,GAAG,6BAA6B;;AAE7C;AACA,OAAO,MAAMC,UAAU,GAAG,MAAAA,CAAOC,KAAa,GAAG,EAAE,EAAEC,IAAY,GAAG,CAAC,KAAsB;EACzF,MAAMC,WAAW,GAAGF,KAAK,GACrB,cAAcG,kBAAkB,CAACH,KAAK,CAAC,gBAAgBG,kBAAkB,CAACH,KAAK,CAAC,EAAE,GAClF,EAAE;EACN,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,OAAO,IAAII,WAAW,UAAUD,IAAI,YAAY,CAAC;EAEjF,IAAI,CAACG,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,yBAAyBH,QAAQ,CAACI,UAAU,EAAE,CAAC;EACjE;EAEA,OAAOJ,QAAQ,CAACK,IAAI,CAAC,CAAC;AACxB,CAAC;;AAED;AACA,OAAO,MAAMC,aAAa,GAAG,MAAOC,EAAU,IAAoB;EAChE,MAAMP,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,OAAO,IAAIa,EAAE,EAAE,CAAC;EAEhD,IAAI,CAACP,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,+BAA+BI,EAAE,KAAKP,QAAQ,CAACI,UAAU,EAAE,CAAC;EAC9E;EAEA,OAAOJ,QAAQ,CAACK,IAAI,CAAC,CAAC;AACxB,CAAC;;AAED;AACA,OAAO,MAAMG,OAAO,GAAG,MAAOC,IAAsB,IAAoB;EACtE,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAACP,OAAO,EAAE;IACpCgB,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,IAAI;EAC3B,CAAC,CAAC;EAEF,IAAI,CAACT,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,sBAAsBH,QAAQ,CAACI,UAAU,EAAE,CAAC;EAC9D;AACF,CAAC;;AAED;AACA,OAAO,MAAMW,UAAU,GAAG,MAAOR,EAAU,IAAoB;EAC7D,MAAMP,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,OAAO,IAAIa,EAAE,EAAE,EAAE;IAAEG,MAAM,EAAE;EAAS,CAAC,CAAC;EAEtE,IAAI,CAACV,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,+BAA+BI,EAAE,KAAKP,QAAQ,CAACI,UAAU,EAAE,CAAC;EAC9E;AACF,CAAC;;AAED;AACA,OAAO,MAAMY,kBAAkB,GAAG,MAAAA,CAAOT,EAAU,EAAEU,KAAa,KAAoB;EACpF,MAAMjB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,OAAO,IAAIa,EAAE,EAAE,EAAE;IAC/CG,MAAM,EAAE,OAAO;IACfC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEG;IAAM,CAAC;EAChC,CAAC,CAAC;EAEF,IAAI,CAACjB,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,oCAAoCI,EAAE,KAAKP,QAAQ,CAACI,UAAU,EAAE,CAAC;EACnF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}